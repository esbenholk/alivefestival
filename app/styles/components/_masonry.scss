//
// Masonry
// Fluid widths are hard and it is easiter not to use Susy here.
//


// Small version
$small-columns: 2;
$small-from: 400px;

// Small/Medium version
$sm-columns: 3;
$sm-from: 600px;

// Medium version
$medium-columns: 4;
$medium-from: 900px;

// Medium/Large version
$ml-columns: 5;
$ml-from: 1300px;

// Large version
$large-columns: 6;
$large-from: 1500px;

.Main .Masonry {
	padding-left: 0;
	padding-right: 0;
	max-width: none;
	list-style: none;
}

.grid-sizer,
.Masonry > .Artist {
	@media (min-width: em($small-from)) {
		width: span(1 of $small-columns);
	}
	@media (min-width: em($sm-from)) {
		width: span(1 of $sm-columns);
	}
	@media (min-width: em($medium-from)) {
		width: span(1 of $medium-columns);
	}
	@media (min-width: em($ml-from)) {
		width: span(1 of $ml-columns);
	}
	@media (min-width: em($large-from)) {
		width: span(1 of $large-columns) - 0.5;
	}

	//
	// Animate in
	//
	transition: opacity 1s ease-out;
	opacity: 0;
	//@include translateY(-2px);
	.loaded & {
		opacity: 1;
		//@include translateY(0);
	}
	@for $i from 1 through 30 {
		&:nth-child(#{$i}){
			$delay: 1s * $i * 0.08;
			transition-delay: $delay;
		}
	}
}
.gutter-sizer {
	@media (min-width: em($small-from)) {
		width: gutter($small-columns);
	}
	@media (min-width: em($sm-from)) {
		width: gutter($sm-columns);
	}
	@media (min-width: em($medium-from)) {
		width: gutter($medium-columns);
	}
	@media (min-width: em($ml-from)) {
		width: gutter($ml-columns);
	}
	@media (min-width: em($large-from)) {
		width: gutter($large-columns);
	}
}
.Masonry > .Artist {
	margin-bottom: 2%;
	.Artist-title {
		position: absolute;
		left: -3px;
		bottom: 20px;
		margin-bottom: 0;
		padding: 0.2em 0.3em;
		background-color: #000;
		color: $white;
		box-shadow: 3px 3px 0 0 rgba(0,0,0,0.5);
	}
}
